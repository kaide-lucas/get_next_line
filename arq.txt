char	*clean_stash(char *stash)
{
	size_t	i;
	size_t	j;
	char	*new_stash;

	if (!stash)
		return (NULL);
	i = 0;
	while (stash[i] && stash[i] != '\n')
		i++;
	if (!stash[i])
	{
		free(stash);
		return (NULL);
	}
	new_stash = malloc(ft_strlen(stash) - i);
	if (!new_stash)
	{
		free(stash);
		return (NULL);
	}
	i++;
	j = 0;
	while (stash[i])
		new_stash[j++] = stash[i++];
	new_stash[j] = '\0';
	free(stash);
	return (new_stash);
}
---------------------------------------------------------------------

char	*extract_line(char *stash)
{
	size_t	i;
	size_t	len;
	char	*line;

	if (!stash || !stash[0])
		return (NULL);
	i = 0;
	while (stash[i] && stash[i] != '\n')
		i++;
	if (stash[i] == '\n')
		len = i + 2;
	else
		len = i + 1;
	line = malloc(len);
	if (!line)
		return (NULL);
	ft_strlcpy(line, stash, len);
	return (line);
}

O próximo passo lógico é focar na função principal do projeto: a get_next_line.

Essa função deve:

Ler do arquivo (usando read)
Atualizar o stash com os dados lidos
Usar extract_line para entregar a próxima linha ao usuário
Usar clean_stash para atualizar o stash após cada entrega
Pergunta para reflexão:
Você já tem um esqueleto da função get_next_line?
Se não, comece criando a estrutura básica e integre as funções auxiliares que você já desenvolveu!